<!DOCTYPE html>
<html>
<meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline' https://localhost:10001/;">

<head>
    <title>DPoP test</title>
    
    <style>
        html body {
            background-color: white;
        }
        
        h1,
        h2,
        h3 {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            text-transform: uppercase;
            color: slategrey;
        }
        
        .title {
            padding-left: 100px;
        }

        .section{
            margin-left:100px;
        }
        
        .flex-container {
            background-color: white;
            display: flex;
            flex-direction: row;
            width: 100%;
            height: auto;
            justify-content: space-evenly;
        }
        
        .flex-container-code {
            display: flex;
            flex-direction: row;
            width: 100%;
            height: auto;
            justify-content: left;
        }
        
        .tokenContainer {
            margin-top: 10px;
            margin-bottom: 10px;
            background-color: white;
            width: 49%;
            border: 1px solid lightslategray;
            border-radius: 4px;
        }
        
        .code {
            font-size: 10pt;
            font-family: monospace;
            tab-size: 4;
            margin: 0px;
            padding-left: 15px;
            padding-right: 15px;
        }
        
        .base64 {
            font-size: 18pt;
            font-family: monospace;
            padding: 10px;
            overflow-wrap: break-word;
        }

        .apiResponse{
            font-size: 10pt;
            font-family: monospace;
            tab-size: 4;
            margin: 0px;
            padding-left: 15px;
            padding-right: 15px;
        }
        
        .header {
            color: slategrey;
            text-align: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 22px;
        }
        
        .subtitle {
            color: slategrey;
            text-align: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 18;
            text-transform: uppercase;
        }
        
        .jwt-header {
            color: rebeccapurple;
        }
        
        .jwt-payload {
            color: cornflowerblue;
        }
        
        .jwt-signature {
            color: coral;
        }
        
        .jwt-part-separator {
            margin-left: 3px;
            margin-right: 3px;
            color: black;
        }
        
        .code-line {
            word-wrap: break-word;
            white-space: pre-wrap;
            word-break: normal;
        }
        
        .claim {
            text-indent: 0;
        }
        
        .claim_type {
            font-weight: bold;
            color: indigo;
        }
        
        .claim_value {
            font-style: oblique;
        }
        
        .tabx1 {
            margin-left: 15px;
        }
        
        .tabx2 {
            margin-left: 30px;
        }

        .accentuate{
            font-weight: bold;
            color: red;
        }

        h2 button{
            all: inherit;
            border: 0;
            display: flex;
            justify-content: space-between;
            width: 100%;
            padding: 0.5em 0;            
        }

        h2 button:focus svg {  
            outline: 1px solid;
        }
 
        button svg {
            height: 1em;
            margin-left: 0.5em;
        }
        
        [aria-expanded="true"] .vert {
            display: none;
        }

        [aria-expanded] rect {
            fill: currentColor;
        }

        [aria-expanded="true"] .vert {
            display: none;
        }

        .expCollapse{
            color: black;
        }

        .next-section-btn{
            color: white;
            padding: 20px;
            background-color: gray;
            border: solid 2px black;            
        }

        .actionbtn{
            color: white;
            background-color: green;
            border: solid 2px black;
            padding: 20px;
            margin-right: 10px;
        }

    </style>
    
</head>


<body>

    <div class="title">
        <h1>DPoP</h1>
        <h3>Demonstrating Proof of Possession at the application layer</h3>
    </div>

    <div class="section" id="section1" itemid="s1">
        <h2 class="expCollapse">
            <button itemid="expbtn1" aria-expanded="false">1. Generating the DPoP proof for the token request
                <svg viewBox="0 0 10 10" aria-hidden="true" focusable="false">
                    <rect class="vert" height="8" width="2" y="1" x="4" />
                    <rect height="2" width="8" y="4" x="1" />
                </svg> 
            </button>
        </h2>
        <div hidden>
           <div>
               The first step in the DPoP flow is to generate the DPoP proof.
               The DPoP proof is a JWT that contains some specific information in both the jose header and the payload.
           </div>
            <div>                
                The jose header contains a claim with a jwk structure which contains neccessary information about the key which was used to sign the DPoP proof.<br>
                The key will be used by the Authorization Server to bind the DPoP proof to the access token.
           </div>
            <div>
               The payload in the JWT contains some specific claims in the payload that will be used to bind the proof to a resource.<br>
               These claims are:
               <ul>
                   <li>"htm": Indicates the http method that the client will use to request the resource.</li>
                   <li>"htu": The http uri of the resource that the client wants to request (without query and fragment parts).</li>
               </ul> 
           </div>
            <div class="flex-container">
                <div id="base64tokenContainer" class="tokenContainer">
                    <div class="header">BASE64URL ENCODED TOKEN</div>
                    <hr>
                    <div id="dpopProofBase64" class="base64" contenteditable="true"></div>
                </div>

                <div id="jsonTokenContainer" class="tokenContainer">
                    <div class="header">JSON FORMATTED TOKEN</div>
                    <hr>
                    <div class="subtitle">Jose header:</div>
                    <hr>
                    <div id="jwtHeader" class="code" contenteditable="true"></div>
                    <hr>
                    <div class="subtitle">Payload:</div>
                    <hr>
                    <div id="jwtPayload" class="code" contenteditable="true"></div>
                    <hr>
                    <div class="subtitle">Signature:</div>
                    <hr>
                    <div id="jwtSignature" class="code" contenteditable="true"></div>
                </div>
            </div>
            <div>
                <button class="actionbtn" id="dpop_proof_btn">Generate the DPoP proof</button>
                <button class="next-section-btn" itemid="1" >Next: Use the DPoP proof >></button>
            </div>
            
        </div>  
    </div>  
    <hr>
    <div class="section" id="section2"> 
        <h2  class="expCollapse">
            <button itemid="expbtn2"  aria-expanded="false">2. Requesting a DPoP-bound Access Token
                <svg viewBox="0 0 10 10" aria-hidden="true" focusable="false">
                    <rect class="vert" height="8" width="2" y="1" x="4" />
                    <rect height="2" width="8" y="4" x="1" />
                </svg> 
            </button>
        </h2>
        <div hidden>
           
            <div class="flex-container">
                <div id="base64AccessTokenContainer" class="tokenContainer">
                    <div class="header">BASE64URL ENCODED TOKEN</div>
                    <hr>
                    <div id="accessTokenBase64" class="base64" contenteditable="true"></div>
                </div>

                <div id="jsonAccessTokenContainer" class="tokenContainer">
                    <div class="header">JSON FORMATTED TOKEN</div>
                    <hr>
                    <div class="subtitle">Jose header:</div>
                    <hr>
                    <div id="at_jwtHeader" class="code" contenteditable="true"></div>
                    <hr>
                    <div class="subtitle">Payload:</div>
                    <hr>
                    <div id="at_jwtPayload" class="code" contenteditable="true"></div>
                    <hr>
                    <div class="subtitle">Signature:</div>
                    <hr>
                    <div id="at_jwtSignature" class="code" contenteditable="true"></div>
                </div>
            </div>
            <div>
                <h2>The Access Token hash:</h2>
                <div id="at_hash"></div>
            </div>
            <div>
                <button class="actionbtn" id="get_access_token_using_proof">Get the access token using DPoP proof</button><button class="next-section-btn" itemid="2" >Next: Create new DPoP proof for the API >></button>
            </div>
            
        </div>
    </div>
    <hr>
    <div class="section" id="section3">
        <h2  class="expCollapse">
            <button itemid="expbtn3" aria-expanded="false">3. Create new DPoP proof that contains Access Token hash
                <svg viewBox="0 0 10 10" aria-hidden="true" focusable="false">
                    <rect class="vert" height="8" width="2" y="1" x="4" />
                    <rect height="2" width="8" y="4" x="1" />
                </svg> 
            </button>
        </h2>
        <div hidden>
            <div>
                <button id="api_btn">Call the access token with a new DPoP proof and the Access Token</button>
            </div>
            <div class="flex-container">
                <div id="base64AccessTokenContainer" class="tokenContainer">
                    <div class="header">BASE64URL ENCODED TOKEN</div>
                    <hr>
                    <div id="dpopProofResourceBase64" class="base64" contenteditable="true"></div>
                </div>

                <div id="jsonAccessTokenContainer" class="tokenContainer">
                    <div class="header">JSON FORMATTED TOKEN</div>
                    <hr>
                    <div class="subtitle">Jose header:</div>
                    <hr>
                    <div id="res_jwtHeader" class="code" contenteditable="true"></div>
                    <hr>
                    <div class="subtitle">Payload:</div>
                    <hr>
                    <div id="res_jwtPayload" class="code" contenteditable="true"></div>
                    <hr>
                    <div class="subtitle">Signature:</div>
                    <hr>
                    <div id="res_jwtSignature" class="code" contenteditable="true"></div>
                </div>
            </div>
            <button class="next-section-btn" itemid="3" >Next: Call the API >></button>
        </div>
    </div>
    <hr>
    <div class="section" id="section4">  
        <h2 class="expCollapse">
            <button itemid="expbtn4" aria-expanded="false">4. Calling the API with DPoP proof and Access Token
                <svg viewBox="0 0 10 10" aria-hidden="true" focusable="false">
                    <rect class="vert" height="8" width="2" y="1" x="4" />
                    <rect height="2" width="8" y="4" x="1" />
                </svg> 
            </button>
        </h2>            
        <div hidden>
            <div>
                <button id="call_api_btn">Call the API with the new DPoP proof and the Access Token</button>
            </div>
            <div class="flex-container">
                <div id="base64AccessTokenContainer" class="tokenContainer">
                    <div class="header">Response data</div>
                    <hr>
                    <div id="apiResponseContent" class="apiResponse" contenteditable="true"></div>
                </div>
            </div>
        </div>    
    </div>
    <div style="height: 900px;">&nbsp;</div>
    <script type="Module">
        
        import * as Dpop from './main.js';
        window.Dpop = Dpop;
        let DpopProofForAs = null;
        let DpopProofForResource = null;
        let AccessToken = null;
        let AccessTokenHash = null;

        const ResourceUrl = "https://localhost:44358/DPoP"
        
        let dpopProofBtn = document.getElementById('dpop_proof_btn');

        dpopProofBtn.addEventListener('click', () => {
            
            document.getElementById('dpopProofBase64').innerText = '';
            document.getElementById('jwtHeader').innerText = '';
            document.getElementById('jwtPayload').innerText = ''; 
            document.getElementById('jwtSignature').innerText = '';

            Dpop.generateDpopProof(ResourceUrl)
            .then((proof)=>{
                DpopProofForAs = proof;
                Dpop.renderBase64DpopProof(document, document.getElementById('dpopProofBase64'), proof.dpopProof);
                Dpop.renderJwt(document, proof.dpopProof, document.getElementById('jwtHeader'), document.getElementById('jwtPayload'), document.getElementById('jwtSignature'));
            });
        });

        let tokenBtn = document.getElementById('get_access_token_using_proof');
        tokenBtn.addEventListener('click', () => {            
            Dpop.getAccessToken("https://localhost:5001/connect/token", DpopProofForAs.dpopProof)
            .then((accessToken) => {
                AccessToken = accessToken;
                Dpop.renderBase64DpopProof(document, document.getElementById('accessTokenBase64'), accessToken);
                Dpop.renderJwt(document, accessToken, document.getElementById('at_jwtHeader'), document.getElementById('at_jwtPayload'), document.getElementById('at_jwtSignature'));
                Dpop.getAccessTokenHash(accessToken)
                .then((hash) => {
                    AccessTokenHash = hash;
                    document.getElementById('at_hash').innerText = hash;                    
                });
            });
        });

        let apiBtn = document.getElementById('api_btn');
        apiBtn.addEventListener('click', () => {
            Dpop.generateDpopProofForResource(AccessTokenHash, DpopProofForAs, ResourceUrl).
            then((proof) => {
                DpopProofForResource = proof;
                console.log(proof);
                Dpop.renderBase64DpopProof(document, document.getElementById('dpopProofResourceBase64'), proof.dpopProof);
                Dpop.renderJwt(document, proof.dpopProof, document.getElementById('res_jwtHeader'), document.getElementById('res_jwtPayload'), document.getElementById('res_jwtSignature'));
            })
        });

        let callApiBtn = document.getElementById('call_api_btn');
        callApiBtn.addEventListener('click', () => {            
            Dpop.callAPI(AccessToken, DpopProofForResource).
            then((result) => {
               document.getElementById('apiResponseContent').innerText = result;
            });
        });
    </script>

<script>
    (function() {
  const headings = document.querySelectorAll('.expCollapse');

  var i = 0;
  Array.prototype.forEach.call(headings, h => {
    let btn = h.querySelector('button');    
    let target = h.nextElementSibling;
    i++;
    try{
        var scrollTo = document.getElementById(`section${i}`)        
    }catch(err)
    {
        console.error(err);
    }
    
    btn.onclick = () => {
      let expanded = btn.getAttribute('aria-expanded') === 'true';

      btn.setAttribute('aria-expanded', !expanded);
      target.hidden = expanded;
      scrollTo.scrollIntoView();
    }
  });
})();

(function() {
  const btns = document.querySelectorAll('.next-section-btn');
  Array.prototype.forEach.call(btns, btn => {
    var itemid = parseInt(btn.getAttribute("itemid"));

    if (itemid==4)
        exit;

    const headings = document.querySelectorAll('.expCollapse');

    //TODO: add class to select expand-buttons directly
    Array.prototype.forEach.call(headings, h => {
        let expBtn = h.querySelector('button');        

        if (expBtn.getAttribute("itemid") !== `expbtn${itemid + 1}`){
            return;
        }
                    
        let target = h.nextElementSibling;
    
        btn.onclick = () => {
            expBtn.click();
        }

  });

  });

  

})();
</script>
</body>
</html>